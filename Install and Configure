Install the whole firehol suite
This is the script you will need to install the latest versions of firehol (all tools: firehol, fireqos, update-ipsets, link-balancer, vnetbuild), iprange and netdata, on any Linux system.

build environment

yum update wget
yum install Judy-devel libuv-devel
yum install autoconf automake curl gcc git libmnl-devel libuuid-devel openssl-devel libuv-devel lz4-devel Judy-devel make nc pkgconfig python zlib-develnn -y
yum install zlib-devel libuuid-devel libmnl-devel gcc make git autoconf autogen automake pkgconfig traceroute ipset curl nodejs zip unzip jq ulogd
yum install Judy-devel libuv cmake json-devel autoconf-archive autogen json-c-devel libmnl-devel libuv-devel lz4-devel nmap-ncat openssl-devel python3 git zlib-devel libuuid-devel libmnl gcc make git autoconf automake pkgconfig curl findutils

wget https://raw.githubusercontent.com/firehol/netdata-demo-site/master/install-all-firehol.sh










https://firehol.org/
Firehol is a BASH script that makes it easy to handle iptables

Instalaltion
https://fedoraproject.org/wiki/EPEL
yum install firehol

###############################
Allowing pings and HTTP/HTTPS from anywhere, a custom port tcp/6543, custom udp ports from 1200 to 1230
SSH from some IPs, and restrict outgoing connections but still allow yum updates by root

# Firewall config
ALLOWED_SSH_IPS="192.168.1.0/24 1.2.3.4"
DNS_SERVERS="192.168.1.1 8.8.8.8"

# Redirect port 1234 to 1111
redirect to 1111 inface eth0 proto tcp dport 1234

interface eth0 wan
    # Incoming:
    server ssh accept src "$ALLOWED_SSH_IPS"
    server "http https" accept
    server ping accept
    server custom yourAppNameOrAnything tcp/6543 default accept
    server custom anotherExample udp/1200:1230 default accept src "192.168.67.2 192.168.6.5"

    # Outgoing:
    client ping accept
    client dns accept dst "$DNS_SERVERS"
    # Allow root to access anything:
    client all accept user "root"

    # No other outgoing connections are allowed if they aren't mentioned. 
    # To allow all outgoing connections, use:
    # client all accept
############################################
    
  
FIREHOL_LOG_PREFIX="firehol: "

...
whole_network="10.40.0.0/16"
it_admin_ips="1.2.3.4 2.3.4.5"
redirect to 3128 inface eth0 src "$whole_network" proto tcp dport 80

interface eth0 lan
    server ssh accept src "$it_admin_ips"
    server ping accept
    client all accept

interface eth1 internet
    protection strong
    client all accept

router lan2internet inface eth0 outface eth1
    masquerade
    route imap accept
    route pop3 accept
    route smtp accept
    route all accept src "$it_admin_ips"
  
  
######################################################
    :msg, startswith, "firehol: " -/var/log/firewall.log
& ~
###############
FIREHOL_LOG_PREFIX="firehol: "

######################
/var/log/firewall.log
{
    sharedscripts
    compress
    postrotate
        /bin/kill -HUP `cat /var/run/syslogd.pid 2> /dev/null` 2> /dev/null || true
    endscript
}
##########################
# Drop these explicitly as we get lots of logs
server netbios_dgm drop
server netbios_ns drop
# If you have a static IP and not a DHCP one:
server dhcp drop
server custom udp68 udp/68 any drop
server custom udp69 udp/69 any drop
# etc
############################
# usage example:
# allow_domain 'domainname.com another.domain.com' 'client http accept dst'
function allow_domain() {
        local domains="$1"
        local firehol_line="$2"

        for domain in ${domains}; do
                while read ip; do
                        if echo $ip | grep -Eq '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$'; then
                                $firehol_line "$ip"
                        fi
                done < <(dig ${domain} +short +tries=1 +time=3)
        done
}
#################################
allow_domain 'db.us.clamav.net' 'client http accept dst'
allow_domain 'nagios.rizvir.com' 'client custom tcp/3667 default accept"
#############################
Allowing or blocking countries
ipv4 ipset create countries hash:net
COUNTRIES="ae au"
IPSET_SRC_DST_OPTIONS=
for country in $COUNTRIES; do
        #url="http://www.ipdeny.com/ipblocks/data/aggregated/${country}-aggregated.zone" #site down?
        url="http://ipverse.net/ipblocks/data/countries/${country}.zone"
        country_ips=$(curl -s $url)
        if [ $? != 0 ]; then
                echo "Error downloading country IP list from $url"
                server countrylist deny # force firehol to error out
        fi
        # Make sure that the entry is an IP, or error out
        while read ip; do
                if [[ "$ip" =~ ^#.* ]]; then
                        continue
                fi
                if ! [[ "$ip" =~ ^[0-9].*\/.* ]]; then
                        echo "Country zone had a line with no network address: $ip"
                        server countrylist deny # force firehol to error out
                else
                        ipv4 ipset add countries "$ip"
                fi
        done <<< "$country_ips"
done

#######################################
        server imap accept src ipset:countries

Install the whole firehol suite

vi install-all-firehol.sh

# Debian / Ubuntu
apt-get install zlib1g-dev uuid-dev libmnl-dev gcc make git autoconf autogen automake pkg-config traceroute ipset curl nodejs zip unzip jq ulogd2 autoconf-archive

# Centos / Fedora / Redhat
yum install zlib-devel libuuid-devel libmnl-devel gcc make git autoconf autogen automake pkgconfig traceroute ipset curl nodejs zip unzip jq ulogd

#!/usr/bin/env bash
#
# Copyright 2016-2017 Costa Tsaousis <costa@tsaousis.gr>
# GPL v3+
#
# This script downloads and installs all firehol tools:
#
# - iprange
# - firehol, fireqos, link-balancer, vnetbuild, update-ipsets
# - netdata
#
# Their sources will be placed in /usr/src in a subdir each.
#
# All tools are installed system-wide.
# The script can also update them (just run it again).

for x in iprange firehol netdata
do
    if [ ! -d /usr/src/${x}.git ]
        then
        echo "Downloading (git clone) ${x}..."
        git clone https://github.com/firehol/${x}.git /usr/src/${x}.git || exit 1
    else
        echo "Downloading (git pull) ${x}..."
        cd /usr/src/${x}.git || exit 1
        git pull || exit 1
    fi
done

echo
echo "Building iprange..."
cd /usr/src/iprange.git || exit 1
./autogen.sh || exit 1
./configure --prefix=/usr CFLAGS="-O2" --disable-man || exit 1
make clean
make || exit 1
make install || exit 1

echo
echo "Building firehol..."
cd /usr/src/firehol.git || exit 1
./autogen.sh || exit 1
./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --disable-man --disable-doc || exit 1
make clean
make || exit 1
make install || exit 1

echo
echo "Building netdata..."
cd /usr/src/netdata.git || exit 1
./netdata-installer.sh --dont-wait

exit $?


    
